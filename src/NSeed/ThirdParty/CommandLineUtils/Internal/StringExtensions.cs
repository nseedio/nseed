// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// For more info see: https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/2108
// <auto-generated/>

// Copyright (c) Nate McMaster.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Text;

namespace McMaster.Extensions.CommandLineUtils
{
    internal static class StringExtensions
    {
        public static string ToKebabCase(this string str)
        {
            if (string.IsNullOrEmpty(str))
            {
                return str;
            }

            var sb = new StringBuilder();
            var i = 0;
            var addDash = false;

            for (; i < str.Length; i++)
            {
                var ch = str[i];
                if (!char.IsLetterOrDigit(ch))
                {
                    continue;
                }

                addDash = !char.IsUpper(ch);
                sb.Append(char.ToLowerInvariant(ch));
                i++;
                break;
            }

            for (; i < str.Length; i++)
            {
                var ch = str[i];
                if (char.IsUpper(ch))
                {
                    if (addDash)
                    {
                        addDash = false;
                        sb.Append('-');
                    }

                    sb.Append(char.ToLowerInvariant(ch));
                }
                else if (char.IsLetterOrDigit(ch))
                {
                    addDash = true;
                    sb.Append(ch);
                }
                else
                {
                    addDash = false;
                    sb.Append('-');
                }
            }

            // trim trailing slashes
            while (sb.Length > 0 && sb[sb.Length - 1] == '-')
            {
                sb.Remove(sb.Length - 1, 1);
            }

            return sb.ToString();
        }

        public static string ToConstantCase(this string str)
        {
            if (string.IsNullOrEmpty(str))
            {
                return str;
            }

            var sb = new StringBuilder();
            var i = 0;
            var addUnderscore = false;

            for (; i < str.Length; i++)
            {
                var ch = str[i];
                if (!char.IsLetterOrDigit(ch))
                {
                    continue;
                }

                addUnderscore = !char.IsUpper(ch);
                sb.Append(char.ToUpperInvariant(ch));
                i++;
                break;
            }

            for (; i < str.Length; i++)
            {
                var ch = str[i];
                if (char.IsUpper(ch))
                {
                    if (addUnderscore)
                    {
                        addUnderscore = false;
                        sb.Append('_');
                    }

                    sb.Append(char.ToUpperInvariant(ch));
                }
                else if (char.IsLetterOrDigit(ch))
                {
                    addUnderscore = true;
                    sb.Append(char.ToUpperInvariant(ch));
                }
                else
                {
                    addUnderscore = false;
                    sb.Append('_');
                }
            }

            return sb.ToString();
        }
    }
}
